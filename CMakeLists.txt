#Generated by VisualGDB project wizard.
#Note: VisualGDB will automatically update this file when you add new sources to the project.

# cheeck the cmake version, if you cmake version is not 3.5, change to your current version.
cmake_minimum_required(VERSION 3.5)
project(RobotBase)

# the libraries we used in the code
find_package(glog REQUIRED)
find_package(OpenCV 4.1.0 REQUIRED)
find_package(Boost REQUIRED)
find_package(realsense2 REQUIRED)
include_directories( ${OpenCV_INCLUDE_DIRS} )
include_directories(../)

add_executable(RobotBase
        RobotBase/vision/gimbal/gimbal.cpp
        RobotBase/iniparser/dictionary.c
        RobotBase/iniparser/iniparser.c
        RobotBase/main.cpp
        RobotBase/referee_system.cpp
        RobotBase/roborts_sdk/dispatch/execution.cpp
        RobotBase/roborts_sdk/dispatch/handle.cpp
        RobotBase/roborts_sdk/hardware/serial_device.cpp
        RobotBase/roborts_sdk/protocol/protocol.cpp
        RobotBase/vision/bigbuff/big_buff.cpp
        RobotBase/vision/bigbuff/big_buff.h
        RobotBase/vision/vision_main.cpp
        RobotBase/vision/vision_main.h
        RobotBase/vision/autoAim/autoAim.h
        RobotBase/vision/autoAim/autoAim.cpp
        RobotBase/vision/autoAim/armor.cpp
        RobotBase/vision/autoAim/armor.h
        RobotBase/vision/control.h
        RobotBase/record_video/recording_main.cpp
        RobotBase/record_video/recording_main.h
        RobotBase/vision/cam/Daheng.cpp
        RobotBase/vision/cam/Daheng.cpp)
link_directories(../)
target_link_libraries (RobotBase gxiapi)
target_link_libraries(RobotBase glog)
target_link_libraries(RobotBase ${OpenCV_LIBS})
target_link_libraries(RobotBase ${Boost_LIBRARIES})
target_link_libraries(RobotBase realsense2::realsense2)
#target_link_libraries(RobotBase ${CMAKE_THREAD_LIBS_INIT})

#set(CMAKE_CXX_FLAGS_DEBUG "${CMAKE_CXX_FLAGS_DEBUG} -std=gnu++11")
#set(CMAKE_CXX_FLAGS_RELEASE "${CMAKE_CXX_FLAGS_RELEASE} -std=gnu++11 -pthread")

# depend on the platform
if(ARM OR AARCH64)
    message(ARM and AARCH64)
    SET(CMAKE_BUILD_TYPE Release)
    message(FATAL_ERROR "CMAKE_BUILD_TYPE='${CMAKE_BUILD_TYPE}' is defined and non-empty ")
    SET(CMAKE_CXX_FLAGS_DEBUG "${CMAKE_CXX_FLAGS_DEBUG} -std=gnu++14")
else (X86_64)
    message(The current platform is x86_64)
    SET(CMAKE_BUILD_TYPE Debug)
    message("CMAKE_BUILD_TYPE='${CMAKE_BUILD_TYPE}' is defined")
    SET(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -std=c++14 -pthread")
endif()
